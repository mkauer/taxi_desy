/*
 * powerDistributionBox.h
 *
 *  Created on: Jan 20, 2015
 *      Author: marekp
 */

#ifndef ULOGGER_HAL_UVLOGGER_DEFINES_H_
#define ULOGGER_HAL_UVLOGGER_DEFINES_H_


// 8 bit rw register:
//   bit 0 - channel 0
//   bit 1 - channel 1
//   ...
//   bit 7 - channel 7

#define SYSTEMTICKTIME_SEC							(1.0/118750000)
#define SYSTEMTICKTIME_NS							(SYSTEMTICKTIME_SEC*1000000000)

#define UVLOGGER_FIFO_WIDTH_WORDS 					9
#define UVLOGGER_NUMBEROFCHANNELS					8

#define I2C_ADDRESS_TO_WRITE(x)						(x<<1)
#define I2C_ADDRESS_TO_READ(x)						((x<<1)+1)

#define BASE_UVLOGGER									0x0000

#define OFFS_UVLOGGER_I2C_BASE_A						0x4010
#define OFFS_UVLOGGER_I2C_BASE_B						0x4020
#define OFFS_UVLOGGER_I2C_BASE_C						0x4030
#define OFFS_UVLOGGER_I2C_BASE_D						0x4040
#define OFFS_UVLOGGER_I2C_BASE_E						0x4050
#define OFFS_UVLOGGER_I2C_BASE_F						0x4060

#define OFFS_UVLOGGER_I2C_DATARECEIVE					0x0 // rw, 8bit
#define OFFS_UVLOGGER_I2C_DATASEND						0x2 // rw, 8bit
#define OFFS_UVLOGGER_I2C_CONTROL						0x4 // rw, 5bit
#define  BIT_UVLOGGER_I2C_CONTROL_DIRECTION				0
#define  BIT_UVLOGGER_I2C_CONTROL_SENDSTART				1
#define  BIT_UVLOGGER_I2C_CONTROL_SENDSTOP				2
#define  BIT_UVLOGGER_I2C_CONTROL_WAITFORACK			3
#define  BIT_UVLOGGER_I2C_CONTROL_SENDACK				4
#define OFFS_UVLOGGER_I2C_STARTTRANSFER					0x6 // wo, 1bit
#define OFFS_UVLOGGER_I2C_BUSY							0x6	// ro, 1bit

#define UVLOGGER_I2C_ADDRESS_HVDAC						0x48 // 7bit address, (no rw bit)
#define UVLOGGER_I2C_ADDRESS_HVDAC_WRITE				(UVLOGGER_I2C_ADDRESS_HVDAC<<1)
#define UVLOGGER_I2C_ADDRESS_HVDAC_READ					((UVLOGGER_I2C_ADDRESS_HVDAC<<1)+1)

#define UVLOGGER_I2C_ADDRESS_FLASHERBOARDTMP10X			0x4a // 7bit address, (no rw bit)

#define UVLOGGER_I2C_ADDRESS_MAINBOARDTMP10X			0x49 // 7bit address, (no rw bit)
//#define UVLOGGER_I2C_ADDRESS_MAINBOARDTMP10X_WRITE		(UVLOGGER_I2C_ADDRESS_TMP10X<<1)
//#define UVLOGGER_I2C_ADDRESS_MAINBOARDTMP10X_READ		((UVLOGGER_I2C_ADDRESS_TMP10X<<1)+1)

#define UVLOGGER_I2C_ADDRESS_FLASHERDAC					0x48 // 7bit address, (no rw bit)
//#define UVLOGGER_I2C_ADDRESS_FLASHERDAC_WRITE			(UVLOGGER_I2C_ADDRESS_FLASHERDAC<<1)
//#define UVLOGGER_I2C_ADDRESS_FLASHERDAC_READ			((UVLOGGER_I2C_ADDRESS_FLASHERDAC<<1)+1)

//#define BASE_UVLOGGER_LEDFLASHER						0x4080
#define OFFS_UVLOGGER_LEDFLASHER_SINGLESHOT				0x4080	// wo, 2bit ch.1 and ch.0 (LSB)
#define OFFS_UVLOGGER_LEDFLASHER_ENABLEGENERATOR		0x4082	// rw, 2bit ch.1 and ch.0 (LSB)
#define OFFS_UVLOGGER_LEDFLASHER_USENEGATIVEPOLARITY	0x4084	// rw, 2bit ch.1 and ch.0 (LSB) use bit value '1' to invert the output pulse
#define OFFS_UVLOGGER_LEDFLASHER_PULSEWIDTH0			0x4086	// rw, 8bit
#define OFFS_UVLOGGER_LEDFLASHER_PULSEWIDTH1			0x4088	// rw, 8bit
#define OFFS_UVLOGGER_LEDFLASHER_GENERATORPERIOD0		0x408a	// rw, 32bit
#define OFFS_UVLOGGER_LEDFLASHER_GENERATORPERIOD1		0x408e	// rw, 32bit

#define OFFS_UVLOGGER_HOUSEKEEPING_ENABLEPCBLEDS		0x40a0	// rw, 1bit
#define OFFS_UVLOGGER_HOUSEKEEPING_ENABLEJ24TESTPINS	0x40a6	// rw, 1bit

#define BASE_UVLOGGER_DACBUS1							0x400
#define SPAN_UVLOGGER_DACBUS1							2
#define OFFS_UVLOGGER_DACBUS1_OFFSETVOLTAGESCHANGED		0x02
#define OFFS_UVLOGGER_DACBUS1_OFFSETVOLTAGES			0x10 // ## ...drs4 offsets and others
#define CHAN_UVLOGGER_DACBUS1_OFFSETVOLTAGES_DRS4BIAS			0
#define CHAN_UVLOGGER_DACBUS1_OFFSETVOLTAGES_DRS4ROFS			1
#define CHAN_UVLOGGER_DACBUS1_OFFSETVOLTAGES_ANALOGINPUTCMOFS	2
#define CHAN_UVLOGGER_DACBUS1_OFFSETVOLTAGES_DRS4OOFS			3
#define CHAN_UVLOGGER_DACBUS1_OFFSETVOLTAGES_ANALOGOUTPUTP		4
#define CHAN_UVLOGGER_DACBUS1_OFFSETVOLTAGES_ANALOGOUTPUTN		5

#define OFFS_UVLOGGER_DACBUS1_TRIGGERTHRESHOLDSCHANGED	0x04
#define OFFS_UVLOGGER_DACBUS1_TRIGGERTHRESHOLDS			0x20

//#define OFFS_ICESCINT_TRIGGER_DELAY_RISINGEDGE						0x100c // small delay for trigger edge timing to work
//#define OFFS_ICESCINT_TRIGGER_DELAY_DATA							0x100e // will get the same value as the serdesDelay

#define OFFS_UVLOGGER_READOUT_EVENTFIFOPACKETCONFIG					0x1100
#define MASK_UVLOGGER_READOUT_EVENTFIFOPACKETCONFIG_DRS4SAMPLING	(1<<0)
#define MASK_UVLOGGER_READOUT_EVENTFIFOPACKETCONFIG_DRS4BASELINE	(1<<1)
#define MASK_UVLOGGER_READOUT_EVENTFIFOPACKETCONFIG_DRS4CHARGE		(1<<2)
#define MASK_UVLOGGER_READOUT_EVENTFIFOPACKETCONFIG_DRS4TIMING		(1<<3)
#define MASK_UVLOGGER_READOUT_EVENTFIFOPACKETCONFIG_TRIGGERTIMING	(1<<5)
#define MASK_UVLOGGER_READOUT_EVENTFIFOPACKETCONFIG_TEST_DATA1		(1<<8)
#define MASK_UVLOGGER_READOUT_EVENTFIFOPACKETCONFIG_TEST_DATA2		(1<<9)
#define MASK_UVLOGGER_READOUT_EVENTFIFOPACKETCONFIG_MISC			(1<<11)
#define MASK_UVLOGGER_READOUT_EVENTFIFOPACKETCONFIG_WHITERABBIT		(1<<12)
#define MASK_UVLOGGER_READOUT_EVENTFIFOPACKETCONFIG_GPS				(1<<13)
#define MASK_UVLOGGER_READOUT_EVENTFIFOPACKETCONFIG_PIXELRATES		(1<<14)
#define MASK_UVLOGGER_READOUT_EVENTFIFOPACKETCONFIG_DEBUG			(1<<15)

#define OFFS_UVLOGGER_IRQ_ATEVENTCOUNT						0x1102
#define OFFS_UVLOGGER_IRQ_ATFIFOWORDS						0x1104	// threshold of words in fifo, at which an IRQ is asserted
#define OFFS_UVLOGGER_IRQ_CTRL								0x1106	//
#define BIT_UVLOGGER_IRQ_CTRL_IRQ_EN						0
#define OFFS_UVLOGGER_IRQ_FORCE								0x1108	// writing to this address generates a single IRQ, no matter if irq are enabled or not
#define OFFS_UVLOGGER_READOUT_MISCDATAFORCE					0x110c	// writing to this address generates a mics data packet in the fifo

//#define OFFS_XXX_PIXELTRIGGERCOUNTER_RESET						0x1040
//#define OFFS_XXX_PIXELTRIGGERCOUNTER_PERIOD					0x1042
//#define OFFS_ICESCINT_PIXELTRIGGERCOUNTER_ddp					0x44
//#define OFFS_ICESCINT_PIXELTRIGGERCOUNTER_ddp					0x46
//#define OFFS_XXX_PIXELTRIGGERCOUNTER_NEWDATA					0x48	// rw, 1bit, write '0' will reset the newData latch

#define OFFS_UVLOGGER_RATECOUNTERGATETIME						0x1046
#define OFFS_UVLOGGER_PIXELTRIGGERALLRISINGEDGES_RATE			0x1030
#define SPAN_UVLOGGER_PIXELTRIGGERALLRISINGEDGES_RATE			2
#define COUNT_UVLOGGER_PIXELTRIGGERALLRISINGEDGES_RATE			8
#define OFFS_UVLOGGER_PIXELFIRSTHITSDURINGGATE_RATE				0x1140
#define SPAN_UVLOGGER_PIXELFIRSTHITSDURINGGATE_RATE				2
#define COUNT_UVLOGGER_PIXELFIRSTHITSDURINGGATE_RATE			8
#define OFFS_UVLOGGER_PIXELADDITIONALHITSDURINGGATE_RATE		0x1150
#define SPAN_UVLOGGER_PIXELADDITIONALHITSDURINGGATE_RATE		2
#define COUNT_UVLOGGER_PIXELADDITIONALHITSDURINGGATE_RATE		8

//#define OFFS_XXX_PIXELTRIGGERCOUNTER_RATE						0x1030
//#define SPAN_XXX_PIXELTRIGGERCOUNTER_RATE						2
//#define COUNT_XXX_PIXELTRIGGERCOUNTER_RATE						8
//#define OFFS_ICESCINT_PIXELDEADTIMETRIGGERCOUNTER_RATE				0x1130
//#define SPAN_ICESCINT_PIXELDEADTIMETRIGGERCOUNTER_RATE				2
//#define COUNT_ICESCINT_PIXELDEADTIMETRIGGERCOUNTER_RATE				8

#define OFFS_UVLOGGER_READOUT_NUMBEROFSAMPLESTOREAD					0x10a6
#define OFFS_UVLOGGER_READOUT_READOUTMODE							0x10aa

#define OFFS_UVLOGGER_TRIGGERLOGIC_SERDESDELAY							0x11d0
#define OFFS_UVLOGGER_TRIGGERLOGIC_SINGLESOFTTRIGGER					0x11d2
#define OFFS_UVLOGGER_TRIGGERLOGIC_TRIGGERMASK							0x11d4
#define OFFS_UVLOGGER_TRIGGERLOGIC_SOFTTRIGGERGENERATORENABLE			0x11d8
#define OFFS_UVLOGGER_TRIGGERLOGIC_SOFTTRIGGERGENERATORPERIOD_LOW		0x11da
#define OFFS_UVLOGGER_TRIGGERLOGIC_SOFTTRIGGERGENERATORPERIOD_HIGH		0x11dc
#define OFFS_UVLOGGER_TRIGGERLOGIC_RATECOUNTER_RESET					0x11de
#define OFFS_UVLOGGER_TRIGGERLOGIC_RATECOUNTER_PERIOD					0x11e0
#define OFFS_UVLOGGER_TRIGGERLOGIC_DRS4DECIMATOR						0x11ec

//#define OFFS_ICESCINT_READOUT_CORRECTIONRAMCHANNELMASK				0x10e0
//#define OFFS_ICESCINT_READOUT_CORRECTIONRAMADDRESS					0x10e2
//#define OFFS_ICESCINT_READOUT_CORRECTIONRAMWRITEVALUE				0x10e4
//
#define OFFS_UVLOGGER_READOUT_BASELINESTART							0x10e6
#define OFFS_UVLOGGER_READOUT_BASELINESTOP							0x10e8
//
//#define MASK_ICESCINT_DATATYPE										0xf000
//#define VALUE_ICESCINT_DATATYPE_HEADER								0x1000
//#define VALUE_ICESCINT_DATATYPE_TRIGGERTIMING						0x3000
//#define VALUE_ICESCINT_DATATYPE_DSR4SAMPLING						0x4000
//#define VALUE_ICESCINT_DATATYPE_DSR4BASELINE						0x5000
//#define VALUE_ICESCINT_DATATYPE_DSR4CHARGE							0x6000
//#define VALUE_ICESCINT_DATATYPE_DSR4TIMING							0x7000
//#define VALUE_ICESCINT_DATATYPE_DATAPERSECOND						0x8000
//#define VALUE_ICESCINT_DATATYPE_TESTDATA_STATICEVENTFIFOHEADER		0xa000
//#define VALUE_ICESCINT_DATATYPE_TESTDATA_COUNTEREVENTFIFOHEADER		0xb000
//#define VALUE_ICESCINT_DATATYPE_TESTDATA_COUNTER					0xc000
//#define VALUE_ICESCINT_DATATYPE_DEBUG								0xf000
//
//// helper function to determine if a icescint header is valid
//// returns 1 if header is a valid icescint header
//// returns 0 otherwise
//inline static int icescint_isValidHeader(unsigned short  _header)
//{
//	switch (_header & MASK_ICESCINT_DATATYPE) {
//	case VALUE_ICESCINT_DATATYPE_HEADER:
//	case VALUE_ICESCINT_DATATYPE_DEBUG:
//	case VALUE_ICESCINT_DATATYPE_TRIGGERTIMING:
//	case VALUE_ICESCINT_DATATYPE_DSR4SAMPLING:
//	case VALUE_ICESCINT_DATATYPE_DSR4CHARGE:
//	case VALUE_ICESCINT_DATATYPE_DSR4TIMING:
//	case VALUE_ICESCINT_DATATYPE_DATAPERSECOND:
//	case VALUE_ICESCINT_DATATYPE_TESTDATA_STATICEVENTFIFOHEADER:
//	case VALUE_ICESCINT_DATATYPE_TESTDATA_COUNTEREVENTFIFOHEADER:
//	case VALUE_ICESCINT_DATATYPE_TESTDATA_COUNTER:
//		return 1;
//	default:
//		return 0;
//	}
//}


#endif // ICESCINT_HAL_ICESCINT_DEFINES_H_
