% C:\PROJECTS\ICECUBE\DOR_REV1\FPGA\COMM_CTRL\RX_CHAN\EDGES\HL_DSCR.tdf %
% AHDL code created by Visual Software Solution's StateCAD 4.11 %
% Fri Dec 10 12:25:04 2004 %

% This AHDL code was generated using: %
%  one-hot state assignment with boolean code format. %
%  Minimization is enabled,  implied else is enabled,  %
%  and outputs are speed optimized. %

SUBDESIGN HL_DSCR(
	CLK :	INPUT;
	ct0 :	INPUT;
	ct1 :	INPUT;
	ct2 :	INPUT;
	ct3 :	INPUT;
	low_hl :	INPUT;
	low_lev :	INPUT;
	res :	INPUT;
	ct_aclr :	OUTPUT;
	hl_edge :	OUTPUT;
	maxen :	OUTPUT;
	one :	OUTPUT;
	one_lev :	OUTPUT;
)


VARIABLE
	CNT1 :	DFF;
	ct_aclr :	DFF;
	hl_edge :	DFF;
	HL_WT :	DFF;
	maxen :	DFF;
	one :	DFF;
	one_lev :	DFF;
	STB :	DFF;
	TCAL_EDGE :	DFF;
	WT1 :	DFF;
	WT2 :	DFF;
	WT3 :	DFF;

	cteq5 :	NODE;
	cteq8 :	NODE;
	cteq12 :	NODE;
	cteq15 :	NODE;
BEGIN

% Clock setup %
	CNT1.clk=CLK;
	ct_aclr.clk=CLK;
	hl_edge.clk=CLK;
	HL_WT.clk=CLK;
	maxen.clk=CLK;
	one.clk=CLK;
	one_lev.clk=CLK;
	STB.clk=CLK;
	TCAL_EDGE.clk=CLK;
	WT1.clk=CLK;
	WT2.clk=CLK;
	WT3.clk=CLK;

	IF ( res ) THEN
		CNT1.clrn=GND;
		HL_WT.prn=GND;
		STB.clrn=GND;
		TCAL_EDGE.clrn=GND;
		WT1.clrn=GND;
		WT2.clrn=GND;
		WT3.clrn=GND;
		one_lev.clrn=GND;
		ct_aclr.prn=GND;
		maxen.prn=GND;
		hl_edge.clrn=GND;
		one.clrn=GND;
	ELSE
		CNT1.clrn=VCC;
		HL_WT.prn=VCC;
		STB.clrn=VCC;
		TCAL_EDGE.clrn=VCC;
		WT1.clrn=VCC;
		WT2.clrn=VCC;
		WT3.clrn=VCC;
		one_lev.clrn=VCC;
		ct_aclr.prn=VCC;
		maxen.prn=VCC;
		hl_edge.clrn=VCC;
		one.clrn=VCC;
	END IF;
CNT1 =  !cteq5 & low_hl & CNT1  #  low_hl & HL_WT ;

HL_WT =  !low_lev & cteq5 & CNT1  #  !low_hl & CNT1  #  !low_hl & HL_WT  #  
	cteq15 & WT3 ;

STB =  cteq8 & WT1 ;

TCAL_EDGE =  low_hl & low_lev & cteq5 & CNT1 ;

WT1 =  TCAL_EDGE  #  !cteq8 & WT1 ;

WT2 =  STB  #  !cteq12 & WT2 ;

WT3 =  cteq12 & WT2  #  !cteq15 & WT3 ;



(one_lev,ct_aclr,maxen,hl_edge,one) = (  ( CNT1, CNT1, CNT1, CNT1, CNT1) & ( 
	! ( cteq5, cteq5, cteq5, cteq5, cteq5)&  ( low_hl, low_hl, low_hl, low_hl, 
	low_hl) ) & ((0,0,0,1,0) ) ) # (  ( HL_WT, HL_WT, HL_WT, HL_WT, HL_WT) & (  (
	 low_hl, low_hl, low_hl, low_hl, low_hl) ) & ((0,0,0,1,0) ) ) # (  ( CNT1, 
	CNT1, CNT1, CNT1, CNT1) & ( ! ( low_hl, low_hl, low_hl, low_hl, low_hl) #  ! 
	( low_lev, low_lev, low_lev, low_lev, low_lev)&  ( cteq5, cteq5, cteq5, cteq5
	, cteq5) ) & ((0,1,1,0,0) ) ) # (  ( HL_WT, HL_WT, HL_WT, HL_WT, HL_WT) & ( !
	 ( low_hl, low_hl, low_hl, low_hl, low_hl) ) & ((0,1,1,0,0) ) ) # (  ( WT3, 
	WT3, WT3, WT3, WT3) & (  ( cteq15, cteq15, cteq15, cteq15, cteq15) ) & ((0,1,
	1,0,0) ) ) # (  ( WT1, WT1, WT1, WT1, WT1) & (  ( cteq8, cteq8, cteq8, cteq8,
	 cteq8) ) & ((0,0,0,0,1) ) ) # (  ( CNT1, CNT1, CNT1, CNT1, CNT1) & (  ( 
	low_hl, low_hl, low_hl, low_hl, low_hl)&  ( low_lev, low_lev, low_lev, 
	low_lev, low_lev)&  ( cteq5, cteq5, cteq5, cteq5, cteq5) ) & ((1,0,0,0,0) ) )
	 # (  ( TCAL_EDGE, TCAL_EDGE, TCAL_EDGE, TCAL_EDGE, TCAL_EDGE) & ((1,1,1,1,1)
	 ) & ((0,0,0,0,0) ) ) # (  ( WT1, WT1, WT1, WT1, WT1) & ( ! ( cteq8, cteq8, 
	cteq8, cteq8, cteq8) ) & ((0,0,0,0,0) ) ) # (  ( STB, STB, STB, STB, STB) & (
	(1,1,1,1,1) ) & ((0,0,0,0,0) ) ) # (  ( WT2, WT2, WT2, WT2, WT2) & ( ! ( 
	cteq12, cteq12, cteq12, cteq12, cteq12) ) & ((0,0,0,0,0) ) ) # (  ( WT2, WT2,
	 WT2, WT2, WT2) & (  ( cteq12, cteq12, cteq12, cteq12, cteq12) ) & ((0,0,1,0,
	0) ) ) # (  ( WT3, WT3, WT3, WT3, WT3) & ( ! ( cteq15, cteq15, cteq15, cteq15
	, cteq15) ) & ((0,0,1,0,0) ) );

% Logic Equations %
cteq5 =  !ct3 & ct2 & !ct1 & ct0 ;

cteq8 =  ct3 & !ct2 & !ct1 & !ct0 ;

cteq12 =  ct3 & ct2 & !ct1 & !ct0 ;

cteq15 =  ct3 & ct2 & ct1 & ct0 ;

END;
